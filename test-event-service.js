const { natsManager } = require('./backend/shared/nats');

async function testEventService() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Event Service...\n');

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS
    await natsManager.connect();
    const connection = natsManager.getConnection();
    
    if (!connection) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ NATS');
      return;
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ NATS —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const testDevice = {
      _id: 'test-device-' + Date.now(),
      name: 'Test Device',
      type: 'sensor',
      status: 'online',
      createdAt: new Date()
    };

    const testTelemetry = {
      deviceId: testDevice._id,
      timestamp: new Date(),
      payload: {
        temperature: 23.5,
        humidity: 45,
        pressure: 1013.25
      }
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è device.created...');
    connection.publish('device.created', JSON.stringify(testDevice));
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ device.created –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è device.updated...');
    const updatedDevice = { ...testDevice, status: 'offline' };
    connection.publish('device.updated', JSON.stringify(updatedDevice));
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ device.updated –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 1000));

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è telemetry.received...');
    connection.publish('telemetry.received', JSON.stringify(testTelemetry));
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ telemetry.received –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await new Promise(resolve => setTimeout(resolve, 2000));

    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ Event Service API...');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Event Service
    try {
      const response = await fetch('http://localhost:3004/health');
      if (response.ok) {
        console.log('‚úÖ Event Service –¥–æ—Å—Ç—É–ø–µ–Ω');
      } else {
        console.log('‚ö†Ô∏è  Event Service –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å:', response.status);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  Event Service API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –∑–∞–ø—É—â–µ–Ω)');
    }

    console.log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Event Service –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π:');
    console.log('   docker-compose logs event-service');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç NATS
    await natsManager.disconnect();
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç NATS');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testEventService().catch(console.error); 