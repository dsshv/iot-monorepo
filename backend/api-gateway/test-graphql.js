const axios = require('axios');
const jwt = require('jsonwebtoken');

const API_BASE = 'http://localhost:4000/graphql';
const JWT_SECRET = process.env.JWT_SECRET || 'your-super-secret-jwt-key-change-in-production';

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
function createTestToken() {
  const payload = {
    userId: 'test-user-123',
    email: 'test@example.com',
    role: 'user',
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + (24 * 60 * 60), // 24 —á–∞—Å–∞
  };
  
  return jwt.sign(payload, JWT_SECRET);
}

async function testGraphQLAPI() {
  try {
    console.log('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GraphQL API —Å JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...\n');

    const token = createTestToken();
    console.log(`–°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω: ${token.substring(0, 20)}...\n`);

    const headers = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
    };

    // 1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    console.log('1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
    try {
      const devicesQuery = {
        query: `
          query {
            devices {
              _id
              name
              type
              status
            }
          }
        `
      };
      
      const response = await axios.post(API_BASE, devicesQuery, { headers });
      console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
      console.log(`   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: ${response.data.data.devices.length}`);
      
      if (response.data.data.devices.length > 0) {
        const deviceId = response.data.data.devices[0]._id;
        console.log(`   üîç –ü–µ—Ä–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${response.data.data.devices[0].name} (ID: ${deviceId})`);
        
        // 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        console.log('\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        const deviceQuery = {
          query: `
            query {
              device(id: "${deviceId}") {
                _id
                name
                type
                status
              }
            }
          `
        };
        
        const deviceResponse = await axios.post(API_BASE, deviceQuery, { headers });
        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
        console.log(`   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceResponse.data.data.device.name}`);
        
        // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...');
        const telemetryQuery = {
          query: `
            query {
              deviceTelemetry(deviceId: "${deviceId}") {
                _id
                deviceId
                timestamp
                payload
              }
            }
          `
        };
        
        const telemetryResponse = await axios.post(API_BASE, telemetryQuery, { headers });
        console.log('   ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—è');
        console.log(`   üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏: ${telemetryResponse.data.data.deviceTelemetry.length}`);
      }
    } catch (error) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.response?.data?.errors?.[0]?.message || error.message);
    }

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    console.log('\n4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞...');
    try {
      const devicesQuery = {
        query: `
          query {
            devices {
              _id
              name
              type
              status
            }
          }
        `
      };
      
      await axios.post(API_BASE, devicesQuery, { 
        headers: { 'Content-Type': 'application/json' } 
      });
      console.log('   ‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    } catch (error) {
      if (error.response?.data?.errors?.[0]?.message === 'Authentication required') {
        console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ç–æ–∫–µ–Ω–∞');
      } else {
        console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data?.errors?.[0]?.message || error.message);
      }
    }

    // 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    console.log('\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...');
    try {
      const devicesQuery = {
        query: `
          query {
            devices {
              _id
              name
              type
              status
            }
          }
        `
      };
      
      await axios.post(API_BASE, devicesQuery, { 
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': 'Bearer invalid-token'
        } 
      });
      console.log('   ‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã–ª –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω');
    } catch (error) {
      if (error.response?.data?.errors?.[0]?.message === 'Authentication required') {
        console.log('   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º');
      } else {
        console.log('   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error.response?.data?.errors?.[0]?.message || error.message);
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìù –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ GraphQL Playground:');
    console.log('   http://localhost:4000/graphql');
    console.log('\nüîë –î–æ–±–∞–≤—å—Ç–µ –≤ HTTP HEADERS:');
    console.log(`   {"Authorization": "Bearer ${token}"}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

testGraphQLAPI(); 